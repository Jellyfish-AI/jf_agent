global:
  # Set this to True to skip verification of server SSL certificates.  This might
  # be useful if your Jira / Bitbucket server doesn't have a valid SSL certificate.
  no_verify_ssl: False

jira:
  # URL to Jira
  url: https://jira.yourcompany.com

  # GDPR mode: enable this if your Jira instance's API has User
  # endpoints modified in order to support GDPR.  This should be True
  # for Atlassian Cloud hosted Jira as of March 30, 2019.
  gdpr_active: False

  # The earliest date for pulling issues into Jellyfish (format: YYYY-MM-DD).
  # Most companies want at least a year's worth of issues pulled into Jellyfish.
  # You'll generally just need to set this once, at onboarding time, and then
  # not change it (regular, day-to-day runs of the agent will only pull issues
  # that have been created or updated since the last run).  Comment out or omit
  # to pull all issues into Jellyfish.
  earliest_issue_dt: 2019-01-01

  # The number of concurrent threads the agent will use for downloading issue data.
  # It's unusual, but some Jira instances can be overwhelmed by more than one or
  # two threads making concurrent requests to its API.  If your Jira instance is
  # underpowered, you may want to set this to a low value.  If omitted, defaults
  # to 10.
  issue_download_concurrent_threads: 10

  # The number of issues per page to request when we hit the Jira API.  Empirically,
  # Jira Cloud won't return more than 100 issues at a time even if we ask for more,
  # but Jira Server can do more; 250 is often a successful setting with Jira Server.
  # If omitted, defaults to 100.
  issue_batch_size: 100

  # Whether the agent should download issue worklogs.  If omitted, defaults to True.
  download_worklogs: True

  #############################
  # Options for filtering projects. Only data for projects that meet ALL
  # these criteria will be used. For example, if you provide both
  # `include_projects` and `include_project_categories` only the subset
  # of named projects that are in the specified category will be
  # included.
  #############################

  # Only pull issues from specific projects; omit to pull issues from
  # all projects.
  #
  # Note: use Jira project keys, not names.
  include_projects:
    - PROJ1
    - PROJ2

  # Uncomment this to pull issues from all but specific projects. You
  # will generally want to use either this OR `include_projects`, but
  # not both.
  #
  # Note: use project keys, not names.
  # exclude_projects:
  #   - PROJ1

  # Uncomment to pull issues from specific project categories only.
  # include_project_categories:
  #   - Engineering

  # Uncomment this to pull issues from all but specific project categories.
  # exclude_project_categories:
  #   - Support


  #############################
  # Options for filtering issues.  This filter is applied in addition
  # to any project-level filters above, to control which issues are
  # pulled for the given projects.
  #############################

  # Uncomment this to pull only issues matching a specific JQL
  # filter. Use this if you need more fine-grained control over pulling
  # just a subset of issues within a project.
  # issue_jql: 'text ~ pattern and issuetype != "Secret Type"'


  #############################
  # Options for filtering fileds.  Use these if you need fine-grained control
  # over exactly which fields are pulled for each issue.  This can be useful
  # if some of your fields contain sensitive data that you don't want to
  # send to Jellyfish
  #############################

  # Uncomment this to pull only specific fields on issues.
  # include_fields:
  #   - id
  #   - summary

  # Uncomment this to pull all but specific fields on issues.
  # exclude_fields:
  #   - description
  #   - comment


git:
  # Supported providers are `bitbucket_server`, `bitbucket_cloud`,
  # `gitlab` and `github`.
  provider: bitbucket_server

  # URL to Bitbucket Server, Bitbucket Cloud, GitLab, or GitHub.
  # For Bitbucket Cloud, this should be https://api.bitbucket.org
  # For GitHub Cloud, this should be https://api.github.com
  # For GitHub Enterprise, this should be https://github.yourcompany.com/api/v3 (note lack of trailing slash).
  # Otherwise, use the URL to your local git server.
  url: https://bitbucket.yourcompany.com

  # Only pull from specific projects / organizations / groups.
  # Bitbucket Server: use project keys, not names. Comment this out to pull from all projects.
  # Bitbucket Cloud (required): use your organization login, as it appears in your Bitbucket URLs
  # GitHub (required): use your organization name, as it appears in your GitHub URLs (ex: MyOrg)
  # GitLab (required): use the top-level GitLab "Group ID" (ex: 123)
  include_projects:
      - PROJ1

  # Uncomment this to pull from all but specific projects (not supported for GitHub).
  # Bitbucket Server: use project keys, not names (ex: PROJ1)
  # GitLab: use the top-level GitLab "Group ID" (ex: 123)
  #  exclude_projects:
  #    - PROJ1

  # Only pull from specific repos.  Comment this out to pull from all repos.
  # Bitbucket Server or GitHub: use repository name (ex: my_repository)
  # GitLab: use the GitLab "Project ID" (ex: 123)
  include_repos:
      - my_repository

  # Uncomment this to pull from all but specific repos.
  # Bitbucket Server or GitHub: use repository name (ex: my_repository)
  # GitLab: use the GitLab "Project ID" (ex: 123)
  # exclude_repos:
  #    - repo_to_skip

  # Strip out long-form text content (commit messages, PR text, etc).
  strip_text_content: False

  # Redact names and URLs for projects, repos, branches.
  redact_names_and_urls: False
